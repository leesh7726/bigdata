import pandas as pd

# Series
data = pd.Series (np.linespace(0, 1, num=5))
0| 0.
1| 0.25
2| 0.5
3| 0.75
4| 1.
dtype: float64

data.values
array([0 0.25 0.5 0.75 1])


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

list(data.keys())
[0 1 2 3 4]

list(data.items())
[(0, 0.0), (1, 0.25), (2, 0.5), (3, 0.75), (4, 1.0)]


data.index = ["a", "b", "c", "d", "e"]
a| 0.
b| 0.25
c| 0.5
d| 0.75
e| 1.


명시적 인덱싱 loc
암묵적 인덱싱 iloc


data.loc["a"]
0.0

data.loc["a":"c"]
a| 0.
b| 0.25
c| 0.5

data.loc[["a","c"]]
a| 0.
c| 0.5


data.loc[data>0.7]
d| 0.75
e| 1.


data.iloc[0]
0.0

data.iloc[0:3] // 3은 미포함
a| 0.
b| 0.25
c| 0.5

data.iloc[[0,2]]
a| 0.
c| 0.5



# DataFrame
df = pd.DataFrame(np.random.randint(10, size=(3,4), columns=['col1','col2','col3','col4'])

    col1  col2 col3 col4
 0 |  5    0    3    3
 1 |  7    9    3    5
 2 |  2    4    7    6
 
 df["col2"]
 0 | 0
 1 | 9
 2 | 4
Name: col2, dtype: int32

df.loc[0, "col2":"col3"] === df.iloc[0, 1:3]
col2 0
col3 3
 => 인덱싱은 Series

df.loc[0:0, "col2":"col3"] === df.iloc[0:1, 1:3]
    col2 col3
0 |   0    3
 => 슬라이싱은 DataFrame

df.loc[[0], "col2":"col3"] === df.iloc[[0], 1:3]
    col2 col3
0 |   0    3


df.loc[0:2, "col2":"col3"] === df.iloc[0:3, 1:3]
    col2 col3
0 |   0    3 
1 |   9    3 
2 |   4    7 


df["total"] = df.sum(axis=1)
    col1  col2 col3 col4 total
 0 |  5    0    3    3    11
 1 |  7    9    3    5    24
 2 |  2    4    7    6    19
 
 
 df = df.drop(columns=["col4", "total"], axis=1)
     col1  col2 col3
 0 |  5    0    3   
 1 |  7    9    3   
 2 |  2    4    7   


df.drop(index=1, axis=0)
     col1  col2 col3
 0 |  5    0    3   
 2 |  2    4    7   



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

결측치 처리

     0    1    2
0 |  1    2    3
1 |  4    5    6
2 | NaN   8    9
3 | 10   NaN   12


누락값 제거
df.dropna(axis=0)
     0    1    2
0 |  1    2    3
1 |  4    5    6


누락값 대체
df.fillna(df.mean(axis=0))
     0    1    2
0 |  1    2    3
1 |  4    5    6
2 |  5    8    9
3 | 10    5   12



$$$$$$$$$$$$$$$$$$$$$$$$$

merge

df1 = pd.DataFrame({'name': ['이순신', '강감찬', '을지문덕', '김유신'],
                    'dept': ['연구개발', '영업', '연구개발', '인사']}
                    
df2 = pd.DataFrame({'emp_name': ['이순신', '강감찬', '을지문덕', '김유신'],
                    'project': ['S', 'D', 'A', 'S']}
                    
pd.merge(df1, df2, left_on="name", right_on="emp_name").drop("emp_name", aixs=1)

     name     dept     project
0 | 이순신   연구개발     A
1 | 이순신   연구개발     S
2 | 강감찬    영업        S
3 | 을지문덕 연구개발     D
                    

pd.merge(df1, df2, how="outer", left_on="name", right_on="emp_name").drop("emp_name", aixs=1)

     name     dept     project
0 | 이순신   연구개발     A
1 | 이순신   연구개발     S
2 | 강감찬    영업        S
3 | 을지문덕 연구개발     D
4 | 김유신    인사       NaN


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

seaborn 타이타닉 데이터 셋

import seaborn as sb
titanic = sb.load_dataset("titanic)
titanic.head()



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

정렬

titanic.sort_values(by=["fare", "sex"], ascending=[False, True]).head()
by 매개변수 -> 정렬할 칼럼 지정
ascending 매개변수 -> 오름차순



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

그룹연산

titanic.groupby("sex")[["survived"]].aggregate("mean")
성별 그룹하여, 생존여부 평균을 구하라
aggregate -> 연산

 sex
female | 0.742038
fale   | 0.188908


titanic.groupby("sex")[["survived"]].aggregate("mean").apply(lambda x: x - x.mean())
 sex
female | 0.276565
fale   | -0.276565


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

다차원 분석

titanic.groupby(["sex", "class"])["survived"].aggregate("mean").unstack() === titanic.pivot_table("survifved", index="sex", columns="class")
성별, 클래스 그룹하여, 생존여부 평균을 구하라

sex\class|   First    Second    Third
female   | 0.968085 0.921053 0.5000000
fale     | 0.368852 0.157407 0.135447





